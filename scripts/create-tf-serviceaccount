#!/bin/bash

# Copyright 2020 Gravitational, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# You must configure your local kubectl to point to the right k8s cluster and
# have admin-level access.
#
# Note: all of the k8s resources are created in namespace "terraform".
# 

set -eu -o pipefail

# Allow passing in common name and username in environment. If not provided,
# use default.
TF_NAMESPACE=${TF_NAMESPACE:-terraform}

# Set OS specific values.
if [[ "$OSTYPE" == "linux-gnu" ]]; then
    BASE64_DECODE_FLAG="-d"
elif [[ "$OSTYPE" == "darwin"* ]]; then
    BASE64_DECODE_FLAG="-D"
elif [[ "$OSTYPE" == "linux-musl" ]]; then
    BASE64_DECODE_FLAG="-d"
else
    echo "Unknown OS ${OSTYPE}"
    exit 1
fi

echo "Creating the Kubernetes Service Account with minimal RBAC permissions."
kubectl apply -f - <<EOF
apiVersion: v1
kind: Namespace
metadata:
  name: ${TF_NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: terraform
rules:
- apiGroups:
  - ""
  - apps
  - batch
  - extensions
  - apiextensions.k8s.io
  - coordination.k8s.io
  - networking.k8s.io
  - rbac.authorization.k8s.io
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
  resources:
  - namespaces
  - jobs
  - cronjobs
  - pods
  - pods/portforward
  - pods/log
  - pods/exec
  - leases
  - deployments
  - deployments/scale
  - daemonsets
  - endpoints
  - clusterroles
  - clusterrolebindings
  - roles
  - ingresses
  - services
  - secrets
  - configmaps
  - persistentvolumeclaims
  - serviceaccounts
  - customresourcedefinitions
  - events
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: terraform
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: terraform
subjects:
- kind: ServiceAccount
  name: default
  namespace: ${TF_NAMESPACE}
EOF
# Get the service account token and CA cert.
SA_SECRET_NAME=$(kubectl get -n ${TF_NAMESPACE} sa/default -o "jsonpath={.secrets[0]..name}")
# Note: service account token is stored base64-encoded in the secret but must
# be plaintext in kubeconfig.
SA_TOKEN=$(kubectl get -n ${TF_NAMESPACE} secrets/${SA_SECRET_NAME} -o "jsonpath={.data['token']}" | base64 ${BASE64_DECODE_FLAG})
CA_CERT=$(kubectl get -n ${TF_NAMESPACE} secrets/${SA_SECRET_NAME} -o "jsonpath={.data['ca\.crt']}")

# Extract cluster IP from the current context
CURRENT_CONTEXT=$(kubectl config current-context)
CURRENT_CLUSTER=$(kubectl config view -o jsonpath="{.contexts[?(@.name == \"${CURRENT_CONTEXT}\"})].context.cluster}")
CURRENT_CLUSTER_ADDR=$(kubectl config view -o jsonpath="{.clusters[?(@.name == \"${CURRENT_CLUSTER}\"})].cluster.server}")

cat << EOF

Done! Provide the following variables to the \`kube-system\` Terraform workspace:

 - kube_host: $(echo $CURRENT_CLUSTER_ADDR | sed -e 's|^[^/]*//||' -e 's|/.*$||')
 - kube_ca_certificate: ${CA_CERT}
 - kube_token: ${SA_TOKEN}
EOF
